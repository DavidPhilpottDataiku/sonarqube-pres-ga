name: Code Check with External CICD

on:
  workflow_dispatch: # run manually
  push:
    branches:
      - main

jobs:
  export-bundle:
    runs-on: ubuntu-latest
    outputs:
      bundle_id: ${{ steps.export.outputs.bundle_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install dataiku-api-client urllib3

      - name: Export DSS Bundle
        id: export
        env:
          DSS_DESIGN_IP: ${{ secrets.dss_design_ip }}
          DESIGN_API_KEY: ${{ secrets.design_api_key }}
        run: python .github/scripts/export_bundle.py

      - name: Upload bundle.zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle
          path: ./bundle.zip

  test-bundle:
    needs: export-bundle
    runs-on: ubuntu-latest
    outputs:
      sonar-artifact: sonar-scanner-output.txt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download bundle artifact
        uses: actions/download-artifact@v4
        with:
          name: bundle
          path: ./artifacts

      - name: Install system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip uuid-runtime

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Prepare working directory
        id: prep
        run: |
          PROJECT_KEY="EXTERNAL_DEPLOYMENT"

          mkdir -p "./bundle"
          unzip -q "./artifacts/bundle.zip" -d "./bundle"

          echo "PYTHON_LIBRARY_DIR=./bundle/project_config/lib/python" >> $GITHUB_ENV
          echo "TESTING_ENV_DIR=./bundle/python-envs/TestingCodeEnv" >> $GITHUB_ENV
          echo "WORKING_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Create virtualenv
        run: |
          python3 -m venv .venv
          source ./.venv/bin/activate
          pip install -r "$TESTING_ENV_DIR/actual/requirements.txt"

      - name: Make report directories
        run: |
          mkdir -p "$WORKING_DIR/.reports/mypy" \
                   "$WORKING_DIR/.reports/pylint" \
                   "$WORKING_DIR/.reports/pytest"

      - name: Run pylint
        run: |
          source ./.venv/bin/activate
          python -m pylint "$PYTHON_LIBRARY_DIR/app" \
          --output-format=parseable \
          > "$WORKING_DIR/.reports/pylint/pylint-report.txt" 2>&1 || true

      - name: Run mypy
        run: |
          source ./.venv/bin/activate
          python -m mypy "$PYTHON_LIBRARY_DIR/app" \
           > "$WORKING_DIR/.reports/mypy/mypy-report.txt" 2>&1 || true

      - name: Run pytest
        run: |
          source ./.venv/bin/activate
          python -m pytest "$PYTHON_LIBRARY_DIR/tests" -v --capture=no \
          --junitxml="$WORKING_DIR/.reports/pytest/tests.xml" \
          --cov="$PYTHON_LIBRARY_DIR/app" \
          --cov-report=xml:"$WORKING_DIR/.reports/pytest/coverage.xml" \
          > "$WORKING_DIR/.reports/pytest/pytest-output.txt" 2>&1 || true

      - name: Install sonar-scanner
        run: |
          curl -sSLo sonar.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH


      - name: Debug
        run: |
          ls $WORKING_DIR
          ls
          ls bundle
          ls .reports
          ls .reports/pylint
          ls .reports/pytest
          ls .reports/mypy
          cat ./.reports/pylint/pylint-report.txt
          cat ./.reports/pytest/coverage.xml
          cat ./.reports/pytest/tests.xml
          cat ./.reports/mypy/mypy-report.txt
          ls $PYTHON_LIBRARY_DIR
      - name: Run sonar-scanner
        env:
          SONARQUBE_IP: ${{ secrets.sonarqube_ip }}
          SONARQUBE_TOKEN: ${{ secrets.sonarqube_token }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=demo_external_cicd \
            -Dsonar.projectName="Demo External CICD" \
            -Dsonar.token=$SONARQUBE_TOKEN \
            -Dsonar.host.url=$SONARQUBE_IP \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.scm.disabled=true \
            -Dsonar.projectBaseDir="$PYTHON_LIBRARY_DIR" \
            -Dsonar.sources=app \
            -Dsonar.tests=tests \
            -Dsonar.exclusions="**/.venv/**,**/__pycache__/**,**/.reports/**" \
            -Dsonar.python.version=3.11 \
            -Dsonar.python.pylint.reportPaths="$WORKING_DIR/.reports/pylint/pylint-report.txt" \
            -Dsonar.python.coverage.reportPaths="$WORKING_DIR/.reports/pytest/coverage.xml" \
            -Dsonar.python.xunit.reportPath="$WORKING_DIR/.reports/pytest/tests.xml" \
            -Dsonar.python.mypy.reportPaths="$WORKING_DIR/.reports/mypy/mypy-report.txt" \
            | tee "./sonar-scanner-output.txt"

      - name: Upload SonarScanner output
        uses: actions/upload-artifact@v4
        with:
          name: sonar-scanner-output
          path: ./sonar-scanner-output.txt


  get-sonarqube-result:
    runs-on: ubuntu-latest
    needs: test-bundle
    env:
      SONARQUBE_IP: ${{ secrets.SONARQUBE_IP }}
      SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download SonarScanner output
        uses: actions/download-artifact@v4
        with:
          name: sonar-scanner-output
          path: ./

      - name: Evaluate SonarQube Quality Gate
        run: |
            set -e
            SONAR_OUTPUT_FILE="./sonar-scanner-output.txt"
            cat $SONAR_OUTPUT_FILE
            SCANNER_OUTPUT=$(cat "$SONAR_OUTPUT_FILE")
            TASK_ID=$(echo "$SCANNER_OUTPUT" | grep -oP '/api/ce/task\?id=\K[a-f0-9\-]+')
            if [ -z "$TASK_ID" ]; then
              echo "Could not find task ID in SonarScanner output"
              exit 1
            fi
            echo "Found SonarQube task ID: $TASK_ID"
            ANALYSIS_ID=""
            while true; do
              echo "Response curl will be curl -s -u $SONARQUBE_TOKEN: $SONARQUBE_IP/api/ce/task?id=$TASK_ID"
              curl -s -u "$SONARQUBE_TOKEN:" "$SONARQUBE_IP/api/ce/task?id=$TASK_ID"
              RESPONSE=$(curl -s -u "$SONARQUBE_TOKEN:" "$SONARQUBE_IP/api/ce/task?id=$TASK_ID" || echo "")
              echo "Response is $RESPONSE"
              STATUS=$(echo "$RESPONSE" | jq -r '.task.status' 2>/dev/null || echo "UNKNOWN")
              echo "Task $TASK_ID status: $STATUS"
              if [ "$STATUS" = "SUCCESS" ]; then
                ANALYSIS_ID=$(echo "$RESPONSE" | jq -r '.task.analysisId')
                break
              elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CANCELED" ]; then
                echo "SonarQube task $TASK_ID failed or was canceled"
                exit 1
              fi
              sleep 3
            done
            if [ -z "$ANALYSIS_ID" ]; then
              echo "Analysis ID not found"
              exit 1
            fi
            QUALITY_GATE_STATUS=$(curl -s -u "$SONARQUBE_TOKEN:" "$SONARQUBE_IP/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
              | jq -r '.projectStatus.status' 2>/dev/null || echo "UNKNOWN")
            echo "Quality Gate status: $QUALITY_GATE_STATUS"
            if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
              echo "Quality Gate failed"
              exit 1
            fi           
            echo "Quality Gate passed"